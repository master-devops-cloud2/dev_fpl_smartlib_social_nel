name: Sonar Build and Maven CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Vérifier le code source
      - name: Checkout repository
        uses: actions/checkout@v3

      # Étape 2: Assurer l'encodage correct des fichiers et conversion en UTF-8
      - name: Set file encoding to UTF-8
        run: |
          # Nettoyer les fichiers .properties pour s'assurer qu'ils ont des fins de ligne correctes (Unix)
          find . -type f -name "*.properties" -exec dos2unix {} \;  # Retirer les fins de ligne Windows
          # Convertir les fichiers en UTF-8 si l'encodage est incorrect
          find . -type f -name "*.properties" -exec iconv -f ISO-8859-1 -t UTF-8 -o {} {} \;  # Convertir en UTF-8

      # Étape 3: Définir l'encodage de l'environnement Java pour garantir l'utilisation de UTF-8
      - name: Set Java environment encoding to UTF-8
        run: echo "export LANG=en_US.UTF-8" >> $GITHUB_ENV

      # Étape 4: Installer Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      # Étape 5: Installer Maven
      - name: Install Maven
        run: sudo apt-get install maven

      # Étape 6: Construire le projet avec Maven en ignorant le filtrage des ressources si nécessaire
      - name: Build with Maven (skip resource filtering)
        run: mvn clean install -Dfiltering=false

      # Étape 7: Exécuter les tests Maven (si vous avez des tests définis)
      - name: Run tests
        run: mvn test

      # Étape 8: Exécuter l'analyse SonarQube (Assurez-vous que vous avez un token SonarQube dans vos secrets GitHub)
      - name: Run SonarQube Analysis
        uses: sonarsource/sonarcloud-github-action@v2.0.0
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}

      # Étape 9: Optionnel, vous pouvez ajouter d'autres étapes comme le déploiement ou l'envoi de notifications
