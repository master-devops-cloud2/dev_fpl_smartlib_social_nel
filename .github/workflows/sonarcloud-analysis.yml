name: SonarQube and Build Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
      # Étape 1: Vérifier le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2: Configurer Java 17 avec Adoptium
      - name: Set up JDK 17 (Adoptium)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # Utiliser 'temurin' au lieu de 'adoptopenjdk'
        env:
          LANG: en_US.UTF-8

      # Étape 3: Vérifier la version de Java
      - name: Check Java version
        run: java -version

      # Étape 4: Installer Maven si nécessaire
      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      # Étape 5: Vérifier la version de Maven
      - name: Check Maven version
        run: mvn -version

      # Étape 6: Ajouter SonarCloud token et organisation via variables d'environnement
      - name: Set SonarCloud variables
        run: echo "SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}" >> $GITHUB_ENV
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Étape 7: Exécuter SonarQube analyse via le scanner
      - name: Run SonarQube analysis
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.host.url=https://sonarcloud.io
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Étape 8: Compiler le projet avec Maven
      - name: Build with Maven
        run: mvn clean install

      # Étape 9: Exécuter les tests avec Maven
      - name: Run tests with Maven
        run: mvn test

      # Étape 10: Déployer le projet (si nécessaire)
      - name: Deploy application
        run: echo "Deploying application..."
